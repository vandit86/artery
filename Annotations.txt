This is where smart city planners hit a stumbling block – roads are being dominated by both larger vehicles and the most vulnerable road users – pedestrians and cyclists.

--> computer vision on simulation : detect VRU on simulation ..
    RADAR, LIDAR on simulation Implemented (simulated) on Omnet++ (artery) LDM  
    
--> data to be shared among vehicles ? 
    if new actor is detected 
    if speed is changed 
    if position changed 
    Intentions ? Flow -> provided by base station 
    
--> LDM Codding to send.. ? whot possible dynamic map codding exists (app level)  Example : OpenLR  

--> Vehicles exchange Floating Car Data (FCD)

--> VRU insertion on SUMO !?! 

--> in-network aggregation, clustering and others in order to reduce the communication overhead

--> heterogeneous vehicular networks (Artery can do this)

--> SDR, cognitive radio and machine learning for vehicle communication scheme 

--> Smart auxiliar Glacess for driver 

--> Environmental Perception Message (EPM), which includes a list of all perceived objects of a vehicle, has been developed and analyzed within a IVC network [6,7].

--> Connectivity maps : hese maps areused  to  geographically  index  the  communication  characteris-tics  of  cellular  networks  and  the  mobile  nodes  connected  tothem.

=========================================================================================
--> EVALUATE :
        NUM OF DETECTED VEHICLES (WITH AND WITHOUT VRU DETECT SERVICE)
        POSITION ERRROR (DIFFERENT SEND LOGIC , WHEHICLES NUMBER .. )

--> PRIORIRY OF MESSAGE REGARDING THE TRAVEL PATH OF pedestrians I.E. CROSSING THE ROAD OR TRAVEL ALONG THE ROAD

--> compare CHANEL UTILIZATION (NUM OF Bytes SENDED)
________________________________________
VehId | DETECTED | ERROR | BYTES trans | for different interval
________________________________________

--> influence on result of number of pedestrians / vehicles

--> Vehicle/Pedestrian Type 

--> camera mantain intracking some time after ped out of range 

--> ajust vru-message sending frequency if number of vehicles around is changing (from resumlt see that effectivnes) 


0.2 , 1 

FINISH flow0.3 totPed: 5 pedByMsgCount: 10 X:0.85 M:0.1 L:0.025 midPed: 0.402439 errMid: 0.183418 effect: 0.176075
FINISH flow0.2 totPed: 10 pedByMsgCount: 10 X:0.59375 M:0.265625 L:0.125 midPed: 0.582418 errMid: 0.42304 effect: 0.200904

0.5 , 1

FINISH flow0.3 totPed: 5 pedByMsgCount: 7 X:0.775 M:0.175 L:0.025 midPed: 0.402439 errMid: 0.236761 effect: 0.176075
FINISH flow0.2 totPed: 10 pedByMsgCount: 7 X:0.551724 M:0.293103 L:0.137931 midPed: 0.549451 errMid: 0.443398 effect: 0.19509

07 , 1

FINISH flow0.3 totPed: 5 pedByMsgCount: 5 X:0.625 M:0.3 L:0.05 midPed: 0.402439 errMid: 0.342383 effect: 0.176075
FINISH flow0.2 totPed: 10 pedByMsgCount: 6 X:0.5 M:0.326923 L:0.153846 midPed: 0.516484 errMid: 0.494559 effect: 0.175711

0.9 , 1

FINISH flow0.3 totPed: 5 pedByMsgCount: 5 X:0.625 M:0.3 L:0.05 midPed: 0.402439 errMid: 0.342383 effect: 0.176075
FINISH flow0.2 totPed: 10 pedByMsgCount: 6 X:0.5 M:0.326923 L:0.153846 midPed: 0.516484 errMid: 0.494559 effect: 0.175711



=========================================================================================

--> SIMULATORS 
    
    --> PreScan simulator 
    --> The simulation toolkit software SCANeR II

--> VANETZA Project 
    
    --> Facilities layer on vanetsa just save ego vehicle Path (last 3 points)   
    --> Building Vanetza for Cohda MK5 using Cohda SDK [https://github.com/riebl/vanetza/blob/master/doc/cohda-sdk-build.md
    --> Vanetza Socket Demo:  socktap runs Vanetza on top of Linux raw packet sockets and demonstrates the basic API usage. This enables tests on commodity hardware, i.e. no special V2X or Car2X hardware is required. However, raw packet sockets cannot replace such dedicated hardware entirly. Consider socktap as an experimental application showcasing some of Vanetza's features.


Papers to read : 
Luxembourg SUMO Traffic (LuST) Scenario: 24 Hours of Mobility for Vehicular Networking Research
eNetEditor: Rapid prototyping urban traffic scenarios for SUMO and evaluating their energy consumption

c++ : 

Standard Library, Syntax and Semantics, Compiler and Preprocessor, Object Oriented Programming, Pointers and Data Structures
 
    

